//
// transit.h
//
// DO NOT EDIT THIS FILE.  It is auto-generated from other code,
// and your edits will be lost.
//
// Copyright (c) 2019 GroundWork Open Source, Inc. (www.gwos.com)
// Use of this software is subject to commercial license terms.
//

#ifndef _TRANSIT_H
#define _TRANSIT_H

#ifdef  __cplusplus
extern "C" {
#endif

#include <stdbool.h>    // as of C99, provides the "bool" datatype, along with "true" and "false" macros
#include <stdint.h>     // as or C99, provides "int32_t" and "int64_t" datatypes
#include <time.h>	// to supply "struct timespec", with time_t tv_sec (seconds) and long tv_nsec (nanoseconds) members

#ifndef NUL_TERM_LEN
// Size of a NUL-termination byte.  Generally useful for documenting the
// meaning of +1 and -1 length adjustments having to do with such bytes.
#define NUL_TERM_LEN 1  // sizeof('\0')
#endif  // NUL_TERM_LEN

// typedef int int;    // Go's "int" type is at least 32 bits in size; that might or might not be identical to C's "int" type
typedef int64_t int64;
typedef double  float64;
typedef int32_t int32;

// FIX MAJOR:  this is just for initial development, to allow the generated code
// to compile until we are able to handle *ast.SelectorExpr struct fields
#define FIX_MAJOR_dummy_typename string

#ifndef string
// Make a simple global substitution using the C preprocessor, so we don't
// have to deal with this ad infinitum in the language-conversion code.
#define string char *
#endif  // string

// --------------------------------------------------------------------------------
// Each encode_StructTypeName_as_json() routine declared in this header file:
//
//     extern char *encode_StructTypeName_as_json(const StructTypeName *StructTypeName_ptr, size_t flags);
//
// returns the JSON representation of the structure as a string, or NULL on error.
// The returned string must ultimately be deallocated by the caller using a single
// call to free().  The flags are described here:
//
//     https://jansson.readthedocs.io/en/2.12/apiref.html#encoding
//
// The JSON_SORT_KEYS flag is used by default.
// --------------------------------------------------------------------------------
// Each decode_json_StructTypeName() routine declared in this header file:
//
//     extern StructTypeName *decode_json_StructTypeName(const char *json_str);
//
// returns a pointer to a new object, or NULL on error.  The returned object must
// ultimately be deallocated by the caller using a single call to this routine:
//
//     extern bool free_StructTypeName_tree(StructTypeName *StructTypeName_ptr);
//
// That one call will at the same time free memory for all of the connected
// subsidary objects.
//
// Note that a similar routine:
//
//     extern bool destroy_StructTypeName_tree(StructTypeName *StructTypeName_ptr);
//
// is also available.  It has a very similar purpose, but it is intended for use
// with a tree of data structures which are manually allocated in application code,
// where the individual parts are likely not contiguous in memory.  In contrast,
// the free_StructTypeName_tree() implementation will be kept definitively matched
// to the decode_json_StructTypeName() implementation.  So whether the decoding
// creates just a single large block of memory that contains not only the initial
// StructTypeName object but all of the subsidiary objects it recursively refers to,
// or whether it splays things out via independently floating allocations, a call to
// free_StructTypeName_tree() is guaranteed to match the internal requirements of
// releasing all of the memory allocated by decode_json_StructTypeName().
// --------------------------------------------------------------------------------

extern const string const MetricKind_String[];
typedef enum MetricKind MetricKind;

enum MetricKind {
    Gauge,
    Delta,
    Cumulative,
    MetricKindUnspecified,
};

extern const string const ValueType_String[];
typedef enum ValueType ValueType;

enum ValueType {
    IntegerType,
    DoubleType,
    StringType,
    BooleanType,
    TimeType,
    UnspecifiedType,
};

extern const string const UnitType_String[];
typedef enum UnitType UnitType;

enum UnitType {
    UnitCounter,
    PercentCPU,
};

extern const string const ComputeType_String[];
typedef enum ComputeType ComputeType;

enum ComputeType {
    Query,
    Regex,
    Synthetic,
    Info,
    Performance,
    Health,
};

extern const string const MonitorStatus_String[];
typedef enum MonitorStatus MonitorStatus;

enum MonitorStatus {
    ServiceOk,
    ServiceWarning,
    ServiceUnscheduledCritical,
    ServicePending,
    ServiceScheduledCritical,
    ServiceUnknown,
    HostUp,
    HostUnscheduledDown,
    HostPending,
    HostScheduledDown,
    HostUnreachable,
};

extern const string const MonitoredResourceType_String[];
typedef enum MonitoredResourceType MonitoredResourceType;

enum MonitoredResourceType {
    ServiceResource,
    HostResource,
};

extern const string const MetricSampleType_String[];
typedef enum MetricSampleType MetricSampleType;

enum MetricSampleType {
    Value,
    Warning,
    Critical,
    Min,
    Max,
};

typedef struct {
    FIX_MAJOR_dummy_typename EndTime;  // go:  MillisecondTimestamp
    FIX_MAJOR_dummy_typename StartTime;  // go:  MillisecondTimestamp
} TimeInterval;

#define  make_empty_TimeInterval_array(n) (TimeInterval *) calloc((n), sizeof (TimeInterval))
#define  make_empty_TimeInterval() make_empty_TimeInterval_array(1)
extern bool destroy_TimeInterval_tree(TimeInterval *TimeInterval_ptr);
extern char *encode_TimeInterval_as_json(const TimeInterval *TimeInterval_ptr, size_t flags);
extern TimeInterval *decode_json_TimeInterval(const char *json_str);
#define free_TimeInterval_tree destroy_TimeInterval_tree

typedef struct {
    ValueType ValueType;
    bool BoolValue;
    float64 DoubleValue;
    int64 IntegerValue;
    string StringValue;
    FIX_MAJOR_dummy_typename TimeValue;  // go:  MillisecondTimestamp
} TypedValue;

#define  make_empty_TypedValue_array(n) (TypedValue *) calloc((n), sizeof (TypedValue))
#define  make_empty_TypedValue() make_empty_TypedValue_array(1)
extern bool destroy_TypedValue_tree(TypedValue *TypedValue_ptr);
extern char *encode_TypedValue_as_json(const TypedValue *TypedValue_ptr, size_t flags);
extern TypedValue *decode_json_TypedValue(const char *json_str);
#define free_TypedValue_tree destroy_TypedValue_tree

typedef TimeInterval *TimeInterval_Ptr;

typedef TypedValue *TypedValue_Ptr;

typedef struct {
    MetricSampleType SampleType;
    TimeInterval_Ptr Interval;  // go: *TimeInterval
    TypedValue_Ptr Value;  // go: *TypedValue
} MetricSample;

#define  make_empty_MetricSample_array(n) (MetricSample *) calloc((n), sizeof (MetricSample))
#define  make_empty_MetricSample() make_empty_MetricSample_array(1)
extern bool destroy_MetricSample_tree(MetricSample *MetricSample_ptr);
extern char *encode_MetricSample_as_json(const MetricSample *MetricSample_ptr, size_t flags);
extern MetricSample *decode_json_MetricSample(const char *json_str);
#define free_MetricSample_tree destroy_MetricSample_tree

typedef MetricSample *MetricSample_Ptr;

typedef struct {
    size_t count;
    MetricSample_Ptr *items;
} MetricSample_Ptr_List;

typedef struct {
    string key;
    string value;
} string_string_Pair;

typedef struct {
    size_t count;
    string_string_Pair *items;
} string_string_Pair_List;

typedef struct {
    string MetricName;
    MetricSample_Ptr_List MetricSamples;  // go: []*MetricSample
    string_string_Pair_List Tags;  // go: map[string]string
    UnitType Unit;
} TimeSeries;

#define  make_empty_TimeSeries_array(n) (TimeSeries *) calloc((n), sizeof (TimeSeries))
#define  make_empty_TimeSeries() make_empty_TimeSeries_array(1)
extern bool destroy_TimeSeries_tree(TimeSeries *TimeSeries_ptr);
extern char *encode_TimeSeries_as_json(const TimeSeries *TimeSeries_ptr, size_t flags);
extern TimeSeries *decode_json_TimeSeries(const char *json_str);
#define free_TimeSeries_tree destroy_TimeSeries_tree

typedef struct {
    string Description;
    string Key;
    ValueType ValueType;
} LabelDescriptor;

#define  make_empty_LabelDescriptor_array(n) (LabelDescriptor *) calloc((n), sizeof (LabelDescriptor))
#define  make_empty_LabelDescriptor() make_empty_LabelDescriptor_array(1)
extern bool destroy_LabelDescriptor_tree(LabelDescriptor *LabelDescriptor_ptr);
extern char *encode_LabelDescriptor_as_json(const LabelDescriptor *LabelDescriptor_ptr, size_t flags);
extern LabelDescriptor *decode_json_LabelDescriptor(const char *json_str);
#define free_LabelDescriptor_tree destroy_LabelDescriptor_tree

typedef struct {
    string Key;
    int32 Value;
} ThresholdDescriptor;

#define  make_empty_ThresholdDescriptor_array(n) (ThresholdDescriptor *) calloc((n), sizeof (ThresholdDescriptor))
#define  make_empty_ThresholdDescriptor() make_empty_ThresholdDescriptor_array(1)
extern bool destroy_ThresholdDescriptor_tree(ThresholdDescriptor *ThresholdDescriptor_ptr);
extern char *encode_ThresholdDescriptor_as_json(const ThresholdDescriptor *ThresholdDescriptor_ptr, size_t flags);
extern ThresholdDescriptor *decode_json_ThresholdDescriptor(const char *json_str);
#define free_ThresholdDescriptor_tree destroy_ThresholdDescriptor_tree

typedef LabelDescriptor *LabelDescriptor_Ptr;

typedef struct {
    size_t count;
    LabelDescriptor_Ptr *items;
} LabelDescriptor_Ptr_List;

typedef ThresholdDescriptor *ThresholdDescriptor_Ptr;

typedef struct {
    size_t count;
    ThresholdDescriptor_Ptr *items;
} ThresholdDescriptor_Ptr_List;

typedef struct {
    string CustomName;
    string Description;
    string DisplayName;
    LabelDescriptor_Ptr_List Labels;  // go: []*LabelDescriptor
    ThresholdDescriptor_Ptr_List Thresholds;  // go: []*ThresholdDescriptor
    string Type;
    UnitType Unit;
    ValueType ValueType;
    ComputeType ComputeType;
    MetricKind MetricKind;
} MetricDescriptor;

#define  make_empty_MetricDescriptor_array(n) (MetricDescriptor *) calloc((n), sizeof (MetricDescriptor))
#define  make_empty_MetricDescriptor() make_empty_MetricDescriptor_array(1)
extern bool destroy_MetricDescriptor_tree(MetricDescriptor *MetricDescriptor_ptr);
extern char *encode_MetricDescriptor_as_json(const MetricDescriptor *MetricDescriptor_ptr, size_t flags);
extern MetricDescriptor *decode_json_MetricDescriptor(const char *json_str);
#define free_MetricDescriptor_tree destroy_MetricDescriptor_tree

typedef struct {
    string key;
    TypedValue value;
} string_TypedValue_Pair;

typedef struct {
    size_t count;
    string_TypedValue_Pair *items;
} string_TypedValue_Pair_List;

typedef struct {
    string Name;
    string Type;
    string Owner;
    string Category;
    string Description;
    string Device;
    string_TypedValue_Pair_List Properties;  // go: map[string]TypedValue
} InventoryResource;

#define  make_empty_InventoryResource_array(n) (InventoryResource *) calloc((n), sizeof (InventoryResource))
#define  make_empty_InventoryResource() make_empty_InventoryResource_array(1)
extern bool destroy_InventoryResource_tree(InventoryResource *InventoryResource_ptr);
extern char *encode_InventoryResource_as_json(const InventoryResource *InventoryResource_ptr, size_t flags);
extern InventoryResource *decode_json_InventoryResource(const char *json_str);
#define free_InventoryResource_tree destroy_InventoryResource_tree

typedef struct {
    string Name;
    string Type;
    string Owner;
    MonitorStatus Status;
    FIX_MAJOR_dummy_typename LastCheckTime;  // go:  MillisecondTimestamp
    FIX_MAJOR_dummy_typename NextCheckTime;  // go:  MillisecondTimestamp
    string LastPlugInOutput;
    string_TypedValue_Pair_List Properties;  // go: map[string]TypedValue
} ResourceStatus;

#define  make_empty_ResourceStatus_array(n) (ResourceStatus *) calloc((n), sizeof (ResourceStatus))
#define  make_empty_ResourceStatus() make_empty_ResourceStatus_array(1)
extern bool destroy_ResourceStatus_tree(ResourceStatus *ResourceStatus_ptr);
extern char *encode_ResourceStatus_as_json(const ResourceStatus *ResourceStatus_ptr, size_t flags);
extern ResourceStatus *decode_json_ResourceStatus(const char *json_str);
#define free_ResourceStatus_tree destroy_ResourceStatus_tree

typedef struct {
    string Name;
    MonitoredResourceType Type;
    string Owner;
} MonitoredResource;

#define  make_empty_MonitoredResource_array(n) (MonitoredResource *) calloc((n), sizeof (MonitoredResource))
#define  make_empty_MonitoredResource() make_empty_MonitoredResource_array(1)
extern bool destroy_MonitoredResource_tree(MonitoredResource *MonitoredResource_ptr);
extern char *encode_MonitoredResource_as_json(const MonitoredResource *MonitoredResource_ptr, size_t flags);
extern MonitoredResource *decode_json_MonitoredResource(const char *json_str);
#define free_MonitoredResource_tree destroy_MonitoredResource_tree

typedef struct {
    string AppType;
    string AgentID;
    string TraceToken;
    FIX_MAJOR_dummy_typename TimeStamp;  // go:  MillisecondTimestamp
} TracerContext;

#define  make_empty_TracerContext_array(n) (TracerContext *) calloc((n), sizeof (TracerContext))
#define  make_empty_TracerContext() make_empty_TracerContext_array(1)
extern bool destroy_TracerContext_tree(TracerContext *TracerContext_ptr);
extern char *encode_TracerContext_as_json(const TracerContext *TracerContext_ptr, size_t flags);
extern TracerContext *decode_json_TracerContext(const char *json_str);
#define free_TracerContext_tree destroy_TracerContext_tree

typedef struct {
    size_t count;
    MonitoredResource *items;
} MonitoredResource_List;

typedef struct {
    string GroupName;
    MonitoredResource_List Resources;  // go: []MonitoredResource
} ResourceGroup;

#define  make_empty_ResourceGroup_array(n) (ResourceGroup *) calloc((n), sizeof (ResourceGroup))
#define  make_empty_ResourceGroup() make_empty_ResourceGroup_array(1)
extern bool destroy_ResourceGroup_tree(ResourceGroup *ResourceGroup_ptr);
extern char *encode_ResourceGroup_as_json(const ResourceGroup *ResourceGroup_ptr, size_t flags);
extern ResourceGroup *decode_json_ResourceGroup(const char *json_str);
#define free_ResourceGroup_tree destroy_ResourceGroup_tree

typedef struct {
    size_t count;
    InventoryResource *items;
} InventoryResource_List;

typedef InventoryResource_List *InventoryResource_List_Ptr;

typedef struct {
    size_t count;
    ResourceGroup *items;
} ResourceGroup_List;

typedef ResourceGroup_List *ResourceGroup_List_Ptr;

typedef struct {
    InventoryResource_List_Ptr Inventory;  // go: *[]InventoryResource
    ResourceGroup_List_Ptr Groups;  // go: *[]ResourceGroup
} SendInventoryRequest;

#define  make_empty_SendInventoryRequest_array(n) (SendInventoryRequest *) calloc((n), sizeof (SendInventoryRequest))
#define  make_empty_SendInventoryRequest() make_empty_SendInventoryRequest_array(1)
extern bool destroy_SendInventoryRequest_tree(SendInventoryRequest *SendInventoryRequest_ptr);
extern char *encode_SendInventoryRequest_as_json(const SendInventoryRequest *SendInventoryRequest_ptr, size_t flags);
extern SendInventoryRequest *decode_json_SendInventoryRequest(const char *json_str);
#define free_SendInventoryRequest_tree destroy_SendInventoryRequest_tree

typedef struct {
    string Entity;
    string Status;
    string Message;
    string Location;
    int EntityID;
} OperationResult;

#define  make_empty_OperationResult_array(n) (OperationResult *) calloc((n), sizeof (OperationResult))
#define  make_empty_OperationResult() make_empty_OperationResult_array(1)
extern bool destroy_OperationResult_tree(OperationResult *OperationResult_ptr);
extern char *encode_OperationResult_as_json(const OperationResult *OperationResult_ptr, size_t flags);
extern OperationResult *decode_json_OperationResult(const char *json_str);
#define free_OperationResult_tree destroy_OperationResult_tree

typedef struct {
    size_t count;
    OperationResult *items;
} OperationResult_List;

typedef OperationResult_List *OperationResult_List_Ptr;

typedef struct {
    int ResourcesAdded;
    int ResourcesDeleted;
    string EntityType;
    string Operation;
    int Warning;
    int Count;
    OperationResult_List_Ptr Results;  // go: *[]OperationResult
} OperationResults;

#define  make_empty_OperationResults_array(n) (OperationResults *) calloc((n), sizeof (OperationResults))
#define  make_empty_OperationResults() make_empty_OperationResults_array(1)
extern bool destroy_OperationResults_tree(OperationResults *OperationResults_ptr);
extern char *encode_OperationResults_as_json(const OperationResults *OperationResults_ptr, size_t flags);
extern OperationResults *decode_json_OperationResults(const char *json_str);
#define free_OperationResults_tree destroy_OperationResults_tree

typedef struct {
    size_t count;
    TimeSeries *items;
} TimeSeries_List;

typedef struct {
    ResourceStatus Resource;
    TimeSeries_List Metrics;  // go: []TimeSeries
} ResourceWithMetrics;

#define  make_empty_ResourceWithMetrics_array(n) (ResourceWithMetrics *) calloc((n), sizeof (ResourceWithMetrics))
#define  make_empty_ResourceWithMetrics() make_empty_ResourceWithMetrics_array(1)
extern bool destroy_ResourceWithMetrics_tree(ResourceWithMetrics *ResourceWithMetrics_ptr);
extern char *encode_ResourceWithMetrics_as_json(const ResourceWithMetrics *ResourceWithMetrics_ptr, size_t flags);
extern ResourceWithMetrics *decode_json_ResourceWithMetrics(const char *json_str);
#define free_ResourceWithMetrics_tree destroy_ResourceWithMetrics_tree

typedef struct {
    size_t count;
    ResourceWithMetrics *items;
} ResourceWithMetrics_List;

typedef struct {
    TracerContext Context;
    ResourceWithMetrics_List Resources;  // go: []ResourceWithMetrics
} ResourceWithMetricsRequest;

#define  make_empty_ResourceWithMetricsRequest_array(n) (ResourceWithMetricsRequest *) calloc((n), sizeof (ResourceWithMetricsRequest))
#define  make_empty_ResourceWithMetricsRequest() make_empty_ResourceWithMetricsRequest_array(1)
extern bool destroy_ResourceWithMetricsRequest_tree(ResourceWithMetricsRequest *ResourceWithMetricsRequest_ptr);
extern char *encode_ResourceWithMetricsRequest_as_json(const ResourceWithMetricsRequest *ResourceWithMetricsRequest_ptr, size_t flags);
extern ResourceWithMetricsRequest *decode_json_ResourceWithMetricsRequest(const char *json_str);
#define free_ResourceWithMetricsRequest_tree destroy_ResourceWithMetricsRequest_tree

typedef config_Config *config_Config_Ptr; // ptr to base type

typedef struct {
    config_Config_Ptr config_Config_ptr_;  // go: *config.Config
} transit_Transit;

#define  make_empty_transit_Transit_array(n) (transit_Transit *) calloc((n), sizeof (transit_Transit))
#define  make_empty_transit_Transit() make_empty_transit_Transit_array(1)
extern bool destroy_transit_Transit_tree(transit_Transit *transit_Transit_ptr);
extern char *encode_transit_Transit_as_json(const transit_Transit *transit_Transit_ptr, size_t flags);
extern transit_Transit *decode_json_transit_Transit(const char *json_str);
#define free_transit_Transit_tree destroy_transit_Transit_tree

#ifdef  __cplusplus
}
#endif

#endif // _TRANSIT_H
