Items to take care of:

(*) Consolidate all similar conversion routines, normalize them to a
    standard form, and generate a boilerplate template for that form.
    Make sure that NULL pointers are tested for and correctly handled
    at all levels of conversion.

(*) Identify exceptions to the boilerplate templates for conversion
    functions, and exactly how the exceptions should be processed.

(*) Handle error reporting in routines that perform encoding
    and decoding of the C data structures to/from JSON strings.
    Take one of the following approaches:

    (+) Pass a pointer to an error object into each individual
	conversion routine, where the pointed-to error object will
	be filled in by the conversion routines if an error happens.

    (+) Pass some sort of externally-configured logging handle into
	each individual conversion routine.

    (+) Initialize the conversion package just once with some sort
	of externally-configured logging handle, so this doesn't
	need to be handled by every individual conversion routine.
	Individual conversions can just reference the global logging
	handle as needed.  The code behind that handle can buffer
	the output as needed, or redirect to some other function,
	or do whatever else is needed.	All that is required is
	that we define the API that the logging handle will present
	to the conversion routines.  This is probably the route we
	will take.

    Whatever we do, we should perhaps attempt to coordinate the
    logging from the conversion library with whatever logging that
    our embedded Transit and NATS code will do, and make it all
    play nice with the Nagios DataGeyser execution context.

(*) Pay attention to the Go-code struct field tags, with respect
    to both field renaming and the "omitempty" option, in both
    directions of conversion.

(*) Support a special form of Go-code struct field tags, which will
    allow us to specify what is effectively a union structure, which
    particular field is the discriminator, and which value of the
    discriminator is used to choose a given field in the structure.
    Here's a suggested syntax:

        `c:discriminator`
	`c:discriminator=BooleanType`
	`c:discriminator=DoubleType`
	`c:discriminator=IntegerType`
	`c:discriminator=StringType`
	`c:discriminator=TimeType`

(*) Support some specal form of Go-code struct field tag,
    which identifies code that cannot be handled by the ordinary
    field-by-field conversion process and must instead invoke some
    form of exceptional conversion.  This would be applied to our
    millisecond-timestamp field, in particular, since the conversion
    is between a single scalar representation in a JSON string and
    a specific data structure with two fields (struct timespec)
    in the C code.  Here's a suggested syntax:

	`c:millitimespec`

(*) Make sure that all special forms are handled, including lists
    of pointers and pointers to lists.

(*) [DONE] Pass back the JSON handle where necessary, and have
    the API usage be that the caller needs to call some particular
    routine to free it (which should ultimately devolve to:  if it's
    not NULL, call "json_decref(json);") to release all associated
    storage once the application is done with the generated Go-as-C
    data structures that may reference memory within the JSON
    data structures.

(*) [DONE, via the mechanism described in the second
    paragraph.] Implement a string_ownership flag on the generic
    recursive-destroy routines that I am supplying to wipe out C
    data structures, to specify whether string values are owned
    by some other object (generally, an associated JSON object)
    and should not be free()d by the destroy routine.  A value of
    SELF_OWNERSHIP means that such strings should be free()d during
    the destroy operation.  A value of DELEGATED_OWNERSHIP means
    that such strips should be ignored by the destroy routine;
    they will instead be handled by an application call to the
    free_JSON() routine.  Destroying C objects which are manually
    created by the application will specify SELF_OWNERSHIP,
    while destroying C objects which are automatically created
    by the JSON-string-to-C-objects routines will specify
    DELEGATED_OWNERSHIP.

    Alternatively, just pass a "json_t *" pointer to the destroy
    routine.  If it is NULL, assume that SELF_OWNERSHIP is in play.
    If it is non-NULL, assume that DELEGATED_OWNERSHIP is in play,
    and call free_JSON() on that pointer at the end to destroy all
    associated JSON objects.

    Are there any objects other than strings that need such handling?

