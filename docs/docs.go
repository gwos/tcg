// GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag at
// 2020-02-04 14:10:48.992775843 +0200 EET m=+0.066897767

package docs

import (
	"bytes"
	"encoding/json"
	"strings"

	"github.com/alecthomas/template"
	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{.Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/events": {
            "post": {
                "description": "The following API endpoint can be used to send Alerts to Foundation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Alerts"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "The following API endpoint can be used to get list of metrics from the server.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Metrics"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AgentStatus"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/reload": {
            "post": {
                "description": "The following API endpoint can be used to reload the configuration.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {},
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/start": {
            "post": {
                "description": "The following API endpoint can be used to start NATS dispatcher.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ConnectorStatusDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stats": {
            "get": {
                "description": "The following API endpoint can be used to get TNG statistics.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Agent"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "gwos-app-name",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.AgentStats"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/status": {
            "get": {
                "description": "The following API endpoint can be used to get TNG status.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ConnectorStatusDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/stop": {
            "delete": {
                "description": "The following API endpoint can be used to stop NATS dispatcher.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Server"
                ],
                "parameters": [
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-APP-NAME",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Auth header",
                        "name": "GWOS-API-TOKEN",
                        "in": "header",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/services.ConnectorStatusDTO"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "milliseconds.MillisecondTimestamp": {
            "type": "object"
        },
        "services.AgentStats": {
            "type": "object",
            "properties": {
                "agentID": {
                    "type": "string"
                },
                "appType": {
                    "type": "string"
                },
                "bytesSent": {
                    "type": "integer"
                },
                "executionTimeInventory": {
                    "type": "string"
                },
                "executionTimeMetrics": {
                    "type": "string"
                },
                "lastAlertRun": {
                    "type": "object",
                    "$ref": "#/definitions/milliseconds.MillisecondTimestamp"
                },
                "lastError": {
                    "type": "string"
                },
                "lastInventoryRun": {
                    "type": "object",
                    "$ref": "#/definitions/milliseconds.MillisecondTimestamp"
                },
                "lastMetricsRun": {
                    "type": "object",
                    "$ref": "#/definitions/milliseconds.MillisecondTimestamp"
                },
                "messagesSent": {
                    "type": "integer"
                },
                "metricsSent": {
                    "type": "integer"
                },
                "upSince": {
                    "type": "object",
                    "$ref": "#/definitions/milliseconds.MillisecondTimestamp"
                }
            }
        },
        "services.AgentStatus": {
            "type": "object",
            "properties": {
                "controller": {
                    "type": "string"
                },
                "ctrl": {
                    "type": "object",
                    "$ref": "#/definitions/services.CtrlAction"
                },
                "nats": {
                    "type": "string"
                },
                "transport": {
                    "type": "string"
                }
            }
        },
        "services.ConnectorStatusDTO": {
            "type": "object",
            "properties": {
                "connectorStatus": {
                    "type": "string"
                },
                "jobId": {
                    "type": "integer"
                }
            }
        }
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "1.0",
	Host:        "localhost:8099",
	BasePath:    "/api/v1",
	Schemes:     []string{},
	Title:       "TNG API Documentation",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register(swag.Name, &s{})
}
