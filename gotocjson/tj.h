//
// transit.h
//
// DO NOT EDIT THIS FILE.  It is auto-generated from other code,
// and your edits will be lost.
//
// Copyright (c) 2019 GroundWork Open Source, Inc. (www.gwos.com)
// Use of this software is subject to commercial license terms.
//

#ifndef _TRANSIT_H
#define _TRANSIT_H

#ifdef  __cplusplus
extern "C" {
#endif

#include <stdbool.h>    // as of C99, provides the "bool" datatype, along with "true" and "false" macros
#include <stdint.h>     // as or C99, provides "int32_t" and "int64_t" datatypes
#include <time.h>	// to supply "struct timespec", with time_t tv_sec (seconds) and long tv_nsec (nanoseconds) members

#ifndef NUL_TERM_LEN
// Size of a NUL-termination byte.  Generally useful for documenting the
// meaning of +1 and -1 length adjustments having to do with such bytes.
#define NUL_TERM_LEN 1  // sizeof('\0')
#endif  // NUL_TERM_LEN

// typedef int int;    // Go's "int" type is at least 32 bits in size; that might or might not be identical to C's "int" type
typedef int64_t int64;
typedef double  float64;
typedef int32_t int32;
typedef struct timespec struct_timespec;

// FIX MAJOR:  this is just for initial development, to allow the generated code
// to compile until we are able to handle *ast.SelectorExpr struct fields
#define FIX_MAJOR_dummy_typename string

#ifndef string
// Make a simple global substitution using the C preprocessor, so we don't
// have to deal with this ad infinitum in the language-conversion code.
#define string char *
#endif  // string

// --------------------------------------------------------------------------------
// Each encode_PackageName_StructTypeName_as_json() routine declared in this header file:
//
//     extern char *encode_PackageName_StructTypeName_as_json(const PackageName_StructTypeName *StructTypeName_ptr, size_t flags);
//
// returns the JSON representation of the structure as a string, or NULL on error.
// The returned string must ultimately be deallocated by the caller using a single
// call to free().  The flags are described here:
//
//     https://jansson.readthedocs.io/en/2.12/apiref.html#encoding
//
// The JSON_SORT_KEYS flag is used by default.  This is mostly for initial
// development purposes; we might not want the sorting overhead in production.
// --------------------------------------------------------------------------------
// Each decode_json_PackageName_StructTypeName() routine declared in this header file:
//
//     extern StructTypeName *decode_json_PackageName_StructTypeName(const char *json_str);
//
// returns a pointer to a new object, or NULL on error.  The returned object must
// ultimately be deallocated by the caller using a single call to this routine:
//
//     extern bool free_PackageName_StructTypeName_tree(PackageName_StructTypeName *StructTypeName_ptr);
//
// That one call will at the same time free memory for all of the connected
// subsidary objects.
//
// Note that a similar routine:
//
//     extern bool destroy_PackageName_StructTypeName_tree(PackageName_StructTypeName *PackageName_StructTypeName_ptr);
//
// is also available.  It has a very similar purpose, but it is intended for use
// with a tree of data structures which are manually allocated in application code,
// where the individual parts are likely not contiguous in memory.  In contrast, the
// free_PackageName_StructTypeName_tree() implementation will be kept definitively matched
// to the decode_json_PackageName_StructTypeName() implementation.  So whether the decoding
// creates just a single large block of memory that contains not only the initial
// StructTypeName object but all of the subsidiary objects it recursively refers to,
// or whether it splays things out via independently floating allocations, a call to
// free_StructTypeName_tree() is guaranteed to match the internal requirements of
// releasing all of the memory allocated by decode_json_PackageName_StructTypeName().
// --------------------------------------------------------------------------------

extern const string const MetricKind_String[];
typedef enum MetricKind transit_MetricKind;

enum MetricKind {
    Gauge,
    Delta,
    Cumulative,
    MetricKindUnspecified,
};

extern const string const ValueType_String[];
typedef enum ValueType transit_ValueType;

enum ValueType {
    IntegerType,
    DoubleType,
    StringType,
    BooleanType,
    TimeType,
    UnspecifiedType,
};

extern const string const UnitType_String[];
typedef enum UnitType transit_UnitType;

enum UnitType {
    UnitCounter,
    PercentCPU,
};

extern const string const ComputeType_String[];
typedef enum ComputeType transit_ComputeType;

enum ComputeType {
    Query,
    Regex,
    Synthetic,
    Info,
    Performance,
    Health,
};

extern const string const MonitorStatus_String[];
typedef enum MonitorStatus transit_MonitorStatus;

enum MonitorStatus {
    ServiceOk,
    ServiceWarning,
    ServiceUnscheduledCritical,
    ServicePending,
    ServiceScheduledCritical,
    ServiceUnknown,
    HostUp,
    HostUnscheduledDown,
    HostPending,
    HostScheduledDown,
    HostUnreachable,
};

extern const string const MonitoredResourceType_String[];
typedef enum MonitoredResourceType transit_MonitoredResourceType;

enum MonitoredResourceType {
    ServiceResource,
    HostResource,
};

extern const string const MetricSampleType_String[];
typedef enum MetricSampleType transit_MetricSampleType;

enum MetricSampleType {
    Value,
    Warning,
    Critical,
    Min,
    Max,
};

typedef struct _transit_TimeInterval_ {
    milliseconds_MillisecondTimestamp EndTime;  // go:  milliseconds.MillisecondTimestamp
    milliseconds_MillisecondTimestamp StartTime;  // go:  milliseconds.MillisecondTimestamp
} transit_TimeInterval;

#define  make_empty_transit_TimeInterval_array(n) (transit_TimeInterval *) calloc((n), sizeof (transit_TimeInterval))
#define  make_empty_transit_TimeInterval() make_empty_transit_TimeInterval_array(1)
extern bool destroy_transit_TimeInterval_tree(transit_TimeInterval *transit_TimeInterval_ptr);
extern char *encode_transit_TimeInterval_as_json(const transit_TimeInterval *transit_TimeInterval_ptr, size_t flags);
extern transit_TimeInterval *decode_json_transit_TimeInterval(const char *json_str);
#define free_transit_TimeInterval_tree destroy_transit_TimeInterval_tree
extern json_t *transit_TimeInterval_as_JSON(const transit_TimeInterval *transit_TimeInterval);
extern char *transit_TimeInterval_as_JSON_str(const transit_TimeInterval *transit_TimeInterval);
extern transit_TimeInterval *JSON_as_transit_TimeInterval(json_t *json);
extern transit_TimeInterval *JSON_str_as_transit_TimeInterval(const char *json_str);

typedef struct _transit_TypedValue_ {
    transit_ValueType ValueType;
    bool BoolValue;
    float64 DoubleValue;
    int64 IntegerValue;
    string StringValue;
    milliseconds_MillisecondTimestamp TimeValue;  // go:  milliseconds.MillisecondTimestamp
} transit_TypedValue;

#define  make_empty_transit_TypedValue_array(n) (transit_TypedValue *) calloc((n), sizeof (transit_TypedValue))
#define  make_empty_transit_TypedValue() make_empty_transit_TypedValue_array(1)
extern bool destroy_transit_TypedValue_tree(transit_TypedValue *transit_TypedValue_ptr);
extern char *encode_transit_TypedValue_as_json(const transit_TypedValue *transit_TypedValue_ptr, size_t flags);
extern transit_TypedValue *decode_json_transit_TypedValue(const char *json_str);
#define free_transit_TypedValue_tree destroy_transit_TypedValue_tree
extern json_t *transit_TypedValue_as_JSON(const transit_TypedValue *transit_TypedValue);
extern char *transit_TypedValue_as_JSON_str(const transit_TypedValue *transit_TypedValue);
extern transit_TypedValue *JSON_as_transit_TypedValue(json_t *json);
extern transit_TypedValue *JSON_str_as_transit_TypedValue(const char *json_str);

typedef transit_TimeInterval *transit_TimeInterval_Ptr;

typedef transit_TypedValue *transit_TypedValue_Ptr;

typedef struct _transit_MetricSample_ {
    transit_MetricSampleType SampleType;
    transit_TimeInterval_Ptr Interval;  // go: *TimeInterval
    transit_TypedValue_Ptr Value;  // go: *TypedValue
} transit_MetricSample;

#define  make_empty_transit_MetricSample_array(n) (transit_MetricSample *) calloc((n), sizeof (transit_MetricSample))
#define  make_empty_transit_MetricSample() make_empty_transit_MetricSample_array(1)
extern bool destroy_transit_MetricSample_tree(transit_MetricSample *transit_MetricSample_ptr);
extern char *encode_transit_MetricSample_as_json(const transit_MetricSample *transit_MetricSample_ptr, size_t flags);
extern transit_MetricSample *decode_json_transit_MetricSample(const char *json_str);
#define free_transit_MetricSample_tree destroy_transit_MetricSample_tree
extern json_t *transit_MetricSample_as_JSON(const transit_MetricSample *transit_MetricSample);
extern char *transit_MetricSample_as_JSON_str(const transit_MetricSample *transit_MetricSample);
extern transit_MetricSample *JSON_as_transit_MetricSample(json_t *json);
extern transit_MetricSample *JSON_str_as_transit_MetricSample(const char *json_str);

typedef transit_MetricSample *transit_MetricSample_Ptr;

typedef struct {
    size_t count;
    transit_MetricSample_Ptr *items;
} transit_MetricSample_Ptr_List;

typedef struct {
    string key;
    string value;
} string_string_Pair;

typedef struct {
    size_t count;
    string_string_Pair *items;
} string_string_Pair_List;

typedef struct _transit_TimeSeries_ {
    string MetricName;
    transit_MetricSample_Ptr_List MetricSamples;  // go: []*MetricSample
    string_string_Pair_List Tags;  // go: map[string]string
    transit_UnitType Unit;
} transit_TimeSeries;

#define  make_empty_transit_TimeSeries_array(n) (transit_TimeSeries *) calloc((n), sizeof (transit_TimeSeries))
#define  make_empty_transit_TimeSeries() make_empty_transit_TimeSeries_array(1)
extern bool destroy_transit_TimeSeries_tree(transit_TimeSeries *transit_TimeSeries_ptr);
extern char *encode_transit_TimeSeries_as_json(const transit_TimeSeries *transit_TimeSeries_ptr, size_t flags);
extern transit_TimeSeries *decode_json_transit_TimeSeries(const char *json_str);
#define free_transit_TimeSeries_tree destroy_transit_TimeSeries_tree
extern json_t *transit_TimeSeries_as_JSON(const transit_TimeSeries *transit_TimeSeries);
extern char *transit_TimeSeries_as_JSON_str(const transit_TimeSeries *transit_TimeSeries);
extern transit_TimeSeries *JSON_as_transit_TimeSeries(json_t *json);
extern transit_TimeSeries *JSON_str_as_transit_TimeSeries(const char *json_str);

typedef struct _transit_LabelDescriptor_ {
    string Description;
    string Key;
    transit_ValueType ValueType;
} transit_LabelDescriptor;

#define  make_empty_transit_LabelDescriptor_array(n) (transit_LabelDescriptor *) calloc((n), sizeof (transit_LabelDescriptor))
#define  make_empty_transit_LabelDescriptor() make_empty_transit_LabelDescriptor_array(1)
extern bool destroy_transit_LabelDescriptor_tree(transit_LabelDescriptor *transit_LabelDescriptor_ptr);
extern char *encode_transit_LabelDescriptor_as_json(const transit_LabelDescriptor *transit_LabelDescriptor_ptr, size_t flags);
extern transit_LabelDescriptor *decode_json_transit_LabelDescriptor(const char *json_str);
#define free_transit_LabelDescriptor_tree destroy_transit_LabelDescriptor_tree
extern json_t *transit_LabelDescriptor_as_JSON(const transit_LabelDescriptor *transit_LabelDescriptor);
extern char *transit_LabelDescriptor_as_JSON_str(const transit_LabelDescriptor *transit_LabelDescriptor);
extern transit_LabelDescriptor *JSON_as_transit_LabelDescriptor(json_t *json);
extern transit_LabelDescriptor *JSON_str_as_transit_LabelDescriptor(const char *json_str);

typedef struct _transit_ThresholdDescriptor_ {
    string Key;
    int32 Value;
} transit_ThresholdDescriptor;

#define  make_empty_transit_ThresholdDescriptor_array(n) (transit_ThresholdDescriptor *) calloc((n), sizeof (transit_ThresholdDescriptor))
#define  make_empty_transit_ThresholdDescriptor() make_empty_transit_ThresholdDescriptor_array(1)
extern bool destroy_transit_ThresholdDescriptor_tree(transit_ThresholdDescriptor *transit_ThresholdDescriptor_ptr);
extern char *encode_transit_ThresholdDescriptor_as_json(const transit_ThresholdDescriptor *transit_ThresholdDescriptor_ptr, size_t flags);
extern transit_ThresholdDescriptor *decode_json_transit_ThresholdDescriptor(const char *json_str);
#define free_transit_ThresholdDescriptor_tree destroy_transit_ThresholdDescriptor_tree
extern json_t *transit_ThresholdDescriptor_as_JSON(const transit_ThresholdDescriptor *transit_ThresholdDescriptor);
extern char *transit_ThresholdDescriptor_as_JSON_str(const transit_ThresholdDescriptor *transit_ThresholdDescriptor);
extern transit_ThresholdDescriptor *JSON_as_transit_ThresholdDescriptor(json_t *json);
extern transit_ThresholdDescriptor *JSON_str_as_transit_ThresholdDescriptor(const char *json_str);

typedef transit_LabelDescriptor *transit_LabelDescriptor_Ptr;

typedef struct {
    size_t count;
    transit_LabelDescriptor_Ptr *items;
} transit_LabelDescriptor_Ptr_List;

typedef transit_ThresholdDescriptor *transit_ThresholdDescriptor_Ptr;

typedef struct {
    size_t count;
    transit_ThresholdDescriptor_Ptr *items;
} transit_ThresholdDescriptor_Ptr_List;

typedef struct _transit_MetricDescriptor_ {
    string CustomName;
    string Description;
    string DisplayName;
    transit_LabelDescriptor_Ptr_List Labels;  // go: []*LabelDescriptor
    transit_ThresholdDescriptor_Ptr_List Thresholds;  // go: []*ThresholdDescriptor
    string Type;
    transit_UnitType Unit;
    transit_ValueType ValueType;
    transit_ComputeType ComputeType;
    transit_MetricKind MetricKind;
} transit_MetricDescriptor;

#define  make_empty_transit_MetricDescriptor_array(n) (transit_MetricDescriptor *) calloc((n), sizeof (transit_MetricDescriptor))
#define  make_empty_transit_MetricDescriptor() make_empty_transit_MetricDescriptor_array(1)
extern bool destroy_transit_MetricDescriptor_tree(transit_MetricDescriptor *transit_MetricDescriptor_ptr);
extern char *encode_transit_MetricDescriptor_as_json(const transit_MetricDescriptor *transit_MetricDescriptor_ptr, size_t flags);
extern transit_MetricDescriptor *decode_json_transit_MetricDescriptor(const char *json_str);
#define free_transit_MetricDescriptor_tree destroy_transit_MetricDescriptor_tree
extern json_t *transit_MetricDescriptor_as_JSON(const transit_MetricDescriptor *transit_MetricDescriptor);
extern char *transit_MetricDescriptor_as_JSON_str(const transit_MetricDescriptor *transit_MetricDescriptor);
extern transit_MetricDescriptor *JSON_as_transit_MetricDescriptor(json_t *json);
extern transit_MetricDescriptor *JSON_str_as_transit_MetricDescriptor(const char *json_str);

typedef struct {
    string key;
    transit_TypedValue value;
} string_transit_TypedValue_Pair;

typedef struct {
    size_t count;
    string_transit_TypedValue_Pair *items;
} string_transit_TypedValue_Pair_List;

typedef struct _transit_InventoryResource_ {
    string Name;
    string Type;
    string Owner;
    string Category;
    string Description;
    string Device;
    string_transit_TypedValue_Pair_List Properties;  // go: map[string]TypedValue
} transit_InventoryResource;

#define  make_empty_transit_InventoryResource_array(n) (transit_InventoryResource *) calloc((n), sizeof (transit_InventoryResource))
#define  make_empty_transit_InventoryResource() make_empty_transit_InventoryResource_array(1)
extern bool destroy_transit_InventoryResource_tree(transit_InventoryResource *transit_InventoryResource_ptr);
extern char *encode_transit_InventoryResource_as_json(const transit_InventoryResource *transit_InventoryResource_ptr, size_t flags);
extern transit_InventoryResource *decode_json_transit_InventoryResource(const char *json_str);
#define free_transit_InventoryResource_tree destroy_transit_InventoryResource_tree
extern json_t *transit_InventoryResource_as_JSON(const transit_InventoryResource *transit_InventoryResource);
extern char *transit_InventoryResource_as_JSON_str(const transit_InventoryResource *transit_InventoryResource);
extern transit_InventoryResource *JSON_as_transit_InventoryResource(json_t *json);
extern transit_InventoryResource *JSON_str_as_transit_InventoryResource(const char *json_str);

typedef struct _transit_ResourceStatus_ {
    string Name;
    string Type;
    string Owner;
    transit_MonitorStatus Status;
    milliseconds_MillisecondTimestamp LastCheckTime;  // go:  milliseconds.MillisecondTimestamp
    milliseconds_MillisecondTimestamp NextCheckTime;  // go:  milliseconds.MillisecondTimestamp
    string LastPlugInOutput;
    string_transit_TypedValue_Pair_List Properties;  // go: map[string]TypedValue
} transit_ResourceStatus;

#define  make_empty_transit_ResourceStatus_array(n) (transit_ResourceStatus *) calloc((n), sizeof (transit_ResourceStatus))
#define  make_empty_transit_ResourceStatus() make_empty_transit_ResourceStatus_array(1)
extern bool destroy_transit_ResourceStatus_tree(transit_ResourceStatus *transit_ResourceStatus_ptr);
extern char *encode_transit_ResourceStatus_as_json(const transit_ResourceStatus *transit_ResourceStatus_ptr, size_t flags);
extern transit_ResourceStatus *decode_json_transit_ResourceStatus(const char *json_str);
#define free_transit_ResourceStatus_tree destroy_transit_ResourceStatus_tree
extern json_t *transit_ResourceStatus_as_JSON(const transit_ResourceStatus *transit_ResourceStatus);
extern char *transit_ResourceStatus_as_JSON_str(const transit_ResourceStatus *transit_ResourceStatus);
extern transit_ResourceStatus *JSON_as_transit_ResourceStatus(json_t *json);
extern transit_ResourceStatus *JSON_str_as_transit_ResourceStatus(const char *json_str);

typedef struct _transit_MonitoredResource_ {
    string Name;
    transit_MonitoredResourceType Type;
    string Owner;
} transit_MonitoredResource;

#define  make_empty_transit_MonitoredResource_array(n) (transit_MonitoredResource *) calloc((n), sizeof (transit_MonitoredResource))
#define  make_empty_transit_MonitoredResource() make_empty_transit_MonitoredResource_array(1)
extern bool destroy_transit_MonitoredResource_tree(transit_MonitoredResource *transit_MonitoredResource_ptr);
extern char *encode_transit_MonitoredResource_as_json(const transit_MonitoredResource *transit_MonitoredResource_ptr, size_t flags);
extern transit_MonitoredResource *decode_json_transit_MonitoredResource(const char *json_str);
#define free_transit_MonitoredResource_tree destroy_transit_MonitoredResource_tree
extern json_t *transit_MonitoredResource_as_JSON(const transit_MonitoredResource *transit_MonitoredResource);
extern char *transit_MonitoredResource_as_JSON_str(const transit_MonitoredResource *transit_MonitoredResource);
extern transit_MonitoredResource *JSON_as_transit_MonitoredResource(json_t *json);
extern transit_MonitoredResource *JSON_str_as_transit_MonitoredResource(const char *json_str);

typedef struct _transit_TracerContext_ {
    string AppType;
    string AgentID;
    string TraceToken;
    milliseconds_MillisecondTimestamp TimeStamp;  // go:  milliseconds.MillisecondTimestamp
} transit_TracerContext;

#define  make_empty_transit_TracerContext_array(n) (transit_TracerContext *) calloc((n), sizeof (transit_TracerContext))
#define  make_empty_transit_TracerContext() make_empty_transit_TracerContext_array(1)
extern bool destroy_transit_TracerContext_tree(transit_TracerContext *transit_TracerContext_ptr);
extern char *encode_transit_TracerContext_as_json(const transit_TracerContext *transit_TracerContext_ptr, size_t flags);
extern transit_TracerContext *decode_json_transit_TracerContext(const char *json_str);
#define free_transit_TracerContext_tree destroy_transit_TracerContext_tree
extern json_t *transit_TracerContext_as_JSON(const transit_TracerContext *transit_TracerContext);
extern char *transit_TracerContext_as_JSON_str(const transit_TracerContext *transit_TracerContext);
extern transit_TracerContext *JSON_as_transit_TracerContext(json_t *json);
extern transit_TracerContext *JSON_str_as_transit_TracerContext(const char *json_str);

typedef struct {
    size_t count;
    transit_MonitoredResource *items;
} transit_MonitoredResource_List;

typedef struct _transit_ResourceGroup_ {
    string GroupName;
    transit_MonitoredResource_List Resources;  // go: []MonitoredResource
} transit_ResourceGroup;

#define  make_empty_transit_ResourceGroup_array(n) (transit_ResourceGroup *) calloc((n), sizeof (transit_ResourceGroup))
#define  make_empty_transit_ResourceGroup() make_empty_transit_ResourceGroup_array(1)
extern bool destroy_transit_ResourceGroup_tree(transit_ResourceGroup *transit_ResourceGroup_ptr);
extern char *encode_transit_ResourceGroup_as_json(const transit_ResourceGroup *transit_ResourceGroup_ptr, size_t flags);
extern transit_ResourceGroup *decode_json_transit_ResourceGroup(const char *json_str);
#define free_transit_ResourceGroup_tree destroy_transit_ResourceGroup_tree
extern json_t *transit_ResourceGroup_as_JSON(const transit_ResourceGroup *transit_ResourceGroup);
extern char *transit_ResourceGroup_as_JSON_str(const transit_ResourceGroup *transit_ResourceGroup);
extern transit_ResourceGroup *JSON_as_transit_ResourceGroup(json_t *json);
extern transit_ResourceGroup *JSON_str_as_transit_ResourceGroup(const char *json_str);

typedef struct {
    size_t count;
    transit_InventoryResource *items;
} transit_InventoryResource_List;

typedef transit_InventoryResource_List *transit_InventoryResource_List_Ptr;

typedef struct {
    size_t count;
    transit_ResourceGroup *items;
} transit_ResourceGroup_List;

typedef transit_ResourceGroup_List *transit_ResourceGroup_List_Ptr;

typedef struct _transit_SendInventoryRequest_ {
    transit_InventoryResource_List_Ptr Inventory;  // go: *[]InventoryResource
    transit_ResourceGroup_List_Ptr Groups;  // go: *[]ResourceGroup
} transit_SendInventoryRequest;

#define  make_empty_transit_SendInventoryRequest_array(n) (transit_SendInventoryRequest *) calloc((n), sizeof (transit_SendInventoryRequest))
#define  make_empty_transit_SendInventoryRequest() make_empty_transit_SendInventoryRequest_array(1)
extern bool destroy_transit_SendInventoryRequest_tree(transit_SendInventoryRequest *transit_SendInventoryRequest_ptr);
extern char *encode_transit_SendInventoryRequest_as_json(const transit_SendInventoryRequest *transit_SendInventoryRequest_ptr, size_t flags);
extern transit_SendInventoryRequest *decode_json_transit_SendInventoryRequest(const char *json_str);
#define free_transit_SendInventoryRequest_tree destroy_transit_SendInventoryRequest_tree
extern json_t *transit_SendInventoryRequest_as_JSON(const transit_SendInventoryRequest *transit_SendInventoryRequest);
extern char *transit_SendInventoryRequest_as_JSON_str(const transit_SendInventoryRequest *transit_SendInventoryRequest);
extern transit_SendInventoryRequest *JSON_as_transit_SendInventoryRequest(json_t *json);
extern transit_SendInventoryRequest *JSON_str_as_transit_SendInventoryRequest(const char *json_str);

typedef struct _transit_OperationResult_ {
    string Entity;
    string Status;
    string Message;
    string Location;
    int EntityID;
} transit_OperationResult;

#define  make_empty_transit_OperationResult_array(n) (transit_OperationResult *) calloc((n), sizeof (transit_OperationResult))
#define  make_empty_transit_OperationResult() make_empty_transit_OperationResult_array(1)
extern bool destroy_transit_OperationResult_tree(transit_OperationResult *transit_OperationResult_ptr);
extern char *encode_transit_OperationResult_as_json(const transit_OperationResult *transit_OperationResult_ptr, size_t flags);
extern transit_OperationResult *decode_json_transit_OperationResult(const char *json_str);
#define free_transit_OperationResult_tree destroy_transit_OperationResult_tree
extern json_t *transit_OperationResult_as_JSON(const transit_OperationResult *transit_OperationResult);
extern char *transit_OperationResult_as_JSON_str(const transit_OperationResult *transit_OperationResult);
extern transit_OperationResult *JSON_as_transit_OperationResult(json_t *json);
extern transit_OperationResult *JSON_str_as_transit_OperationResult(const char *json_str);

typedef struct {
    size_t count;
    transit_OperationResult *items;
} transit_OperationResult_List;

typedef transit_OperationResult_List *transit_OperationResult_List_Ptr;

typedef struct _transit_OperationResults_ {
    int ResourcesAdded;
    int ResourcesDeleted;
    string EntityType;
    string Operation;
    int Warning;
    int Count;
    transit_OperationResult_List_Ptr Results;  // go: *[]OperationResult
} transit_OperationResults;

#define  make_empty_transit_OperationResults_array(n) (transit_OperationResults *) calloc((n), sizeof (transit_OperationResults))
#define  make_empty_transit_OperationResults() make_empty_transit_OperationResults_array(1)
extern bool destroy_transit_OperationResults_tree(transit_OperationResults *transit_OperationResults_ptr);
extern char *encode_transit_OperationResults_as_json(const transit_OperationResults *transit_OperationResults_ptr, size_t flags);
extern transit_OperationResults *decode_json_transit_OperationResults(const char *json_str);
#define free_transit_OperationResults_tree destroy_transit_OperationResults_tree
extern json_t *transit_OperationResults_as_JSON(const transit_OperationResults *transit_OperationResults);
extern char *transit_OperationResults_as_JSON_str(const transit_OperationResults *transit_OperationResults);
extern transit_OperationResults *JSON_as_transit_OperationResults(json_t *json);
extern transit_OperationResults *JSON_str_as_transit_OperationResults(const char *json_str);

typedef struct {
    size_t count;
    transit_TimeSeries *items;
} transit_TimeSeries_List;

typedef struct _transit_ResourceWithMetrics_ {
    transit_ResourceStatus Resource;
    transit_TimeSeries_List Metrics;  // go: []TimeSeries
} transit_ResourceWithMetrics;

#define  make_empty_transit_ResourceWithMetrics_array(n) (transit_ResourceWithMetrics *) calloc((n), sizeof (transit_ResourceWithMetrics))
#define  make_empty_transit_ResourceWithMetrics() make_empty_transit_ResourceWithMetrics_array(1)
extern bool destroy_transit_ResourceWithMetrics_tree(transit_ResourceWithMetrics *transit_ResourceWithMetrics_ptr);
extern char *encode_transit_ResourceWithMetrics_as_json(const transit_ResourceWithMetrics *transit_ResourceWithMetrics_ptr, size_t flags);
extern transit_ResourceWithMetrics *decode_json_transit_ResourceWithMetrics(const char *json_str);
#define free_transit_ResourceWithMetrics_tree destroy_transit_ResourceWithMetrics_tree
extern json_t *transit_ResourceWithMetrics_as_JSON(const transit_ResourceWithMetrics *transit_ResourceWithMetrics);
extern char *transit_ResourceWithMetrics_as_JSON_str(const transit_ResourceWithMetrics *transit_ResourceWithMetrics);
extern transit_ResourceWithMetrics *JSON_as_transit_ResourceWithMetrics(json_t *json);
extern transit_ResourceWithMetrics *JSON_str_as_transit_ResourceWithMetrics(const char *json_str);

typedef struct {
    size_t count;
    transit_ResourceWithMetrics *items;
} transit_ResourceWithMetrics_List;

typedef struct _transit_ResourceWithMetricsRequest_ {
    transit_TracerContext Context;
    transit_ResourceWithMetrics_List Resources;  // go: []ResourceWithMetrics
} transit_ResourceWithMetricsRequest;

#define  make_empty_transit_ResourceWithMetricsRequest_array(n) (transit_ResourceWithMetricsRequest *) calloc((n), sizeof (transit_ResourceWithMetricsRequest))
#define  make_empty_transit_ResourceWithMetricsRequest() make_empty_transit_ResourceWithMetricsRequest_array(1)
extern bool destroy_transit_ResourceWithMetricsRequest_tree(transit_ResourceWithMetricsRequest *transit_ResourceWithMetricsRequest_ptr);
extern char *encode_transit_ResourceWithMetricsRequest_as_json(const transit_ResourceWithMetricsRequest *transit_ResourceWithMetricsRequest_ptr, size_t flags);
extern transit_ResourceWithMetricsRequest *decode_json_transit_ResourceWithMetricsRequest(const char *json_str);
#define free_transit_ResourceWithMetricsRequest_tree destroy_transit_ResourceWithMetricsRequest_tree
extern json_t *transit_ResourceWithMetricsRequest_as_JSON(const transit_ResourceWithMetricsRequest *transit_ResourceWithMetricsRequest);
extern char *transit_ResourceWithMetricsRequest_as_JSON_str(const transit_ResourceWithMetricsRequest *transit_ResourceWithMetricsRequest);
extern transit_ResourceWithMetricsRequest *JSON_as_transit_ResourceWithMetricsRequest(json_t *json);
extern transit_ResourceWithMetricsRequest *JSON_str_as_transit_ResourceWithMetricsRequest(const char *json_str);

typedef config_Config *config_Config_Ptr;

typedef struct _transit_Transit_ {
    config_Config_Ptr config_Config_ptr_;  // go: *config.Config
} transit_Transit;

#define  make_empty_transit_Transit_array(n) (transit_Transit *) calloc((n), sizeof (transit_Transit))
#define  make_empty_transit_Transit() make_empty_transit_Transit_array(1)
extern bool destroy_transit_Transit_tree(transit_Transit *transit_Transit_ptr);
extern char *encode_transit_Transit_as_json(const transit_Transit *transit_Transit_ptr, size_t flags);
extern transit_Transit *decode_json_transit_Transit(const char *json_str);
#define free_transit_Transit_tree destroy_transit_Transit_tree
extern json_t *transit_Transit_as_JSON(const transit_Transit *transit_Transit);
extern char *transit_Transit_as_JSON_str(const transit_Transit *transit_Transit);
extern transit_Transit *JSON_as_transit_Transit(json_t *json);
extern transit_Transit *JSON_str_as_transit_Transit(const char *json_str);

#ifdef  __cplusplus
}
#endif

#endif // _TRANSIT_H
